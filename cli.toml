# MaaCore 安装和更新相关配置
#[core]
#channel = "Stable" # 更新通道，可选值为 "Alpha"，"Beta" "Stable"，默认为 "Stable"
#test_time = 0    # 用于测试镜像速度的时间，0 表示不测试，默认为 3
# 查询 MaaCore 最新版本的 api 地址，留空表示使用默认地址
#api_url = "https://github.com/MaaAssistantArknights/MaaRelease/raw/main/MaaAssistantArknights/api/version/"

# 配置是否安装 MaaCore 对应的组件，不推荐使用，分开安装可能会导致版本不一致，从而导致一些问题，该选项可能在未来的版本中移除
#[core.components]
#library = true  # 是否安装 MaaCore 的库，默认为 true
#resource = true # 是否安装 MaaCore 的资源，默认为 true

# CLI 更新相关配置
#[cli]
#channel = "Stable" # 更新通道，可选值为 "Alpha"，"Beta" "Stable"，默认为 "Stable"
# 查询 maa-cli 最新版本的 api 地址，留空表示使用默认地址
#api_url = "https://github.com/MaaAssistantArknights/maa-cli/raw/version/"
# 下载预编译二进制文件的地址，留空表示使用默认地址
#download_url = "https://github.com/MaaAssistantArknights/maa-cli/releases/download/"

# 配置是否安装 maa-cli 对应的组件
#[cli.components]
#binary = true # 是否安装 maa-cli 的二进制文件，默认为 true

# 资源热更新相关配置
#[resource]
#auto_update = true  # 是否在每次运行任务时自动更新资源，默认为 false
#warn_on_update_failure = true # 是否在更新失败时发出警告而不是直接报错
#backend = "libgit2" # 资源热更新后端，可选值为 "git" 或者 "libgit2"，默认为 "git"

# 资源热更新远程仓库相关配置
#[resource.remote]
#branch = "main" # 远程仓库的分支，默认为 "main"
# 远程资源仓库的 URL，留空以使用默认 URL
# GitHub 仓库支持 HTTPS 和 SSH 两种协议访问，建议使用 HTTPS 协议，因为通常情况下不需要额外配置
#url = "https://github.com/MaaAssistantArknights/MaaResource.git"
# url = "git@github.com:MaaAssistantArknights/MaaResource.git"
# 如果你必须使用 SSH 协议，你需要提供 SSH 密钥，最简单的方法是提供密钥的路径
#ssh_key = "~/.ssh/id_ed25519" # ssh 密钥的路径
# maa 默认密钥是未加密的，如果你的密钥是受密码保护的，你需要提供密码来解密密钥
# 注意：只有你使用 libgit2 后端时 maa 才会将密码传递给 libgit2
# 当你使用 git 后端时，git 会自己提示你输入密码
# 如果你使用 git 后端且你的密钥受密码保护，请使用 ssh-agent 来管理你的密钥
#passphrase = "password"       # ssh 密钥的密码
# 然而在配置文件中存储明文密码是不安全的，因此有一些方法可以避免这种情况
# 1. 将 `passphrase` 设置为 true，然后 maa-cli 将每次提示你输入密码
# 这种方法安全但是较为繁琐且无法在 batch 模式下使用
# passphrase = true
# 2. 将 `passphrase` 设置为环境变量名，然后 maa-cli 将使用环境变量作为密码
# 这种方法比明文密码更安全，但是仍然有一定的风险，因为环境变量可能被任何程序访问
# passphrase = { env = "MAA_SSH_PASSPHRASE" }
# 3. 将 `passphrase` 设置为命令，然后 maa-cli 将执行该命令以获取密码
# 如果你使用了密码管理器来管理你的密码，这种方法可能是最安全的且方便的
# passphrase = { cmd = ["pass", "show", "ssh/id_ed25519"] }
# 4. 使用 ssh-agent 来管理你的密钥，**推荐**
# ssh-agent 会将你的密钥保存在内存中，这样你就不需要每次输入密码
# 注意，你需要确保 ssh-agent 已经启动并且已经添加了你的密钥，同时 SSH_AUTH_SOCK 环境变量已经设置
# use_ssh_agent = true # 使用 ssh-agent 进行身份验证，如果设置为 true，将忽略 ssh_key 和 passphrase 字段
